fc$x <- train
# Plot result on original scale
plot(fc, ylim = c(50000,3000000))
fit <- ets(log(train), restrict = TRUE)
summary(fit)
accuracy(forecast(fit,h),log(test))[,c(2,3,5,6)]
fc <- forecast(fit,h)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
# Plot result on original scale
plot(fc, ylim = c(50000,3000000))
fcast = Arima(log(train),
order = c(1,0,1), seasonal = c(5,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
checkresiduals(fcast)
fc <- forecast(fcast,h)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
# Plot result on original scale
plot(fc, ylim = c(50000,3000000))
# Question 5
fit1 <- ets(log(train), model="AAA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
fit1 <- ets(log(train), model="ANA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
library(fpp2)
library(tidyverse)
library(readxl)
library(ggfortify)
setwd('C:/Users/vrajagopalan/OneDrive - IESEG/Desktop/Forcasting')
data <- read_excel("ND000349Q.xls")
# Initialize Timeseries
consumption_expenditure <- ts(data[,2], frequency = 4, start = c(2002,1))
consumption_expenditure
#Initialize Train Test Validation Dataset
final_consumption_expenditure = window(consumption_expenditure, start = c(2002, 1),  end = c(2019,4))
final_consumption_expenditure
# Train Q1 2003 up to Q4 2017
train = window(consumption_expenditure, start = c(2003, 1), end=c(2017,4))
train
# Test Q1 2018 up to Q4 2019
test = window(consumption_expenditure, start=c(2018,1), end = c(2019,4))
test
#Validation Q1 2020 - Q4 2021
validation = window(consumption_expenditure, start=c(2020,1), end = c(2021,4))
validation
#Question1
#Plot Timeseries
plot(consumption_expenditure)
tsdisplay(consumption_expenditure)
ggseasonplot(consumption_expenditure, year.labels=TRUE, year.labels.left=TRUE) +
ylab("consumption_expenditure") +
ggtitle("Seasonal plot:  Consumption Expenditure")
ggsubseriesplot(consumption_expenditure, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Air Passengers") +
ggtitle("Month plot:  Consumption Expenditure")
#Question 2
consumption_expenditure
plot(consumption_expenditure)
tsdisplay(consumption_expenditure)
#Applying log tranformation
l_consumption_expenditure <- log(consumption_expenditure)
plot(l_consumption_expenditure)
tsdisplay(l_consumption_expenditure)
l_consumption_expenditure
plot(l_consumption_expenditure)
tsdisplay(diff(l_consumption_expenditure,12))
BoxCox.lambda(final_consumption_expenditure)
df <- data.frame()
h = length(test)
# Question 4
# Using stl
# Decompose the time series
dim(train) <- NULL
fit <- stl(log(train), s.window="periodic")
fcast <- forecast(fit, method="naive", h=h)
plot(fcast)
checkresiduals(fcast)
accuracy(fcast,log(test))[,c(2,3,5,6)]
df <- rbind(df, cbind('stlnaive', accuracy(fcast,log(test))[,c(2,3,5,6)]))
df
fit <- stl(log(train), s.window="periodic")
fcast <- forecast(fit, method="rwdrift", h=h)
plot(fcast)
checkresiduals(fcast)
accuracy(fcast,log(test))[,c(2,3,5,6)]
df <- rbind(df, cbind('stlrwdrift', accuracy(fcast,log(test))[,c(2,3,5,6)]))
df
fit <- stl(log(train), s.window="periodic")
fcast <- forecast(fit, method="ets", h=h)
plot(fcast)
checkresiduals(fcast)
accuracy(fcast,log(test))[,c(2,3,5,6)]
df <- rbind(df, cbind('stlets', accuracy(fcast,log(test))[,c(2,3,5,6)]))
df
fit <- stl(log(train), s.window="periodic", t.window = 12)
fc <- forecast(fit, method="arima", h=h)
plot(fc)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
# Plot result on original scale
plot(fc, ylim=c(2100,3500))
# Compute forecast mean
fc$mean <- 1/(1+emu)^3*((a+b*emu)*(1+emu)^2 + fvar*(b-a)*emu*(1-emu)/2)
lines(fc$mean,col='red')
checkresiduals(fc)
accuracy(fc,log(test))[,c(2,3,5,6)]
fit <- stl(log(train), s.window="periodic", t.window = 12)
fc <- forecast(fit, method="arima", h=h)
# Compute forecast mean
lines(fc$mean,col='red')
checkresiduals(fc)
fit <- stl(log(train), s.window="periodic")
fc <- forecast(fit, method="arima", h=h)
# Compute forecast mean
lines(fc$mean,col='red')
checkresiduals(fc)
accuracy(fc,log(test))[,c(2,3,5,6)]
checkresiduals(fc)
# Plot result on original scale
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
plot(fc, ylim=c(2100,3500))
df <- rbind(df, cbind('stlarima', accuracy(fcast,log(test))[,c(2,3,5,6)]))
df
# Question 5
fit1 <- ets(log(train), model="AAA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
fit1 <- ets(log(train), model="MAM", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1,lag = 26)
# Question 5
fit1 <- ets(log(train), model="AAA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1)
checkresiduals(fit1, lag = 12)
checkresiduals(fit1, lag = 4)
checkresiduals(fit1, lag = 24)
checkresiduals(fit1, lag = 15)
# Question 5
fit1 <- ets(log(train), model="AAA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
# Question 5
fit1 <- ets(log(train), model="AAA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 15)
checkresiduals(fit1, lag = 15)
fit1 <- ets(log(train), model="MAM", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 15)
fit1 <- ets(log(train), model="MAA", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 15)
fit1 <- ets(log(train), model="MAA", restrict = TRUE)
fit1 <- ets(log(train), model="MAA", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 15)
fit1 <- ets(log(train), model="MAM", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 15)
# Plot result on original scale
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
plot(fc, ylim=c(2100,3500))
fit1 <- ets(log(train), model="MAM", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 15)
# Plot result on original scale
fc <- forecast(fit1,h)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
plot(fc, ylim=c(2100,3500))
# Question 6
#Checking for applicable diffs.
nsdiffs(l_consumption_expenditure)
d_l_consumption_expenditure = diff(l_consumption_expenditure,12)
ndiffs(d_l_consumption_expenditure)
nsdiffs(d_l_consumption_expenditure)
tsdisplay(d_l_consumption_expenditure)
a <- auto.arima(log(train), allowdrift = TRUE,
approximation = FALSE, stepwise = FALSE)
summary(a)
a <- auto.arima(log(train), allowdrift = FALSE,
approximation = FALSE, stepwise = FALSE)
summary(a)
accuracy(fa, log(test))[,c(2,3,5,6)]
checkresiduals(a)
a <- auto.arima(log(train), allowdrift = TRUE,
approximation = FALSE, stepwise = FALSE)
summary(a)
fa <- forecast(a, h=h)
accuracy(fa, log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
# Question 6
#Checking for applicable diffs.
nsdiffs(l_consumption_expenditure)
d_l_consumption_expenditure = diff(l_consumption_expenditure,12)
ndiffs(d_l_consumption_expenditure)
nsdiffs(d_l_consumption_expenditure)
tsdisplay(d_l_consumption_expenditure)
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = TRUE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(2,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(3,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,1,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,1), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(2,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(3,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,1), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
checkresiduals(fcast)
#adf.test(d_l_consumption_expenditure)
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
checkresiduals(fcast)
fcast = Arima(log(train),
order = c(2,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,1), seasonal = c(1,1,1), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(2,0,1), seasonal = c(1,1,1), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
checkresiduals(fcast)
checkresiduals(fcast, lag = 16)
fcast = Arima(log(train),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
checkresiduals(fcast, lag = 16)
# Plot result on original scale
fc <- forecast(fcast,h)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
plot(fc, ylim=c(2100,3500))
fcast = Arima(log(train),
order = c(1,0,1), seasonal = c(1,1,0), include.drift = FALSE)
fcast
accuracy(forecast(fcast, h = h), log(test))[,c(2,3,5,6)]
checkresiduals(fcast)
fit <- stl(log(train), s.window="periodic")
fc <- forecast(fit, method="arima", h=h)
checkresiduals(fc)
accuracy(fc,log(test))[,c(2,3,5,6)]
#Question 9
fcast = Arima(log(final_consumption_expenditure),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fc <- forecast(fcast, h = length(validation))
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- final_consumption_expenditure
plot(consumption_expenditure)
lines(fc$mean, col = 'red')
legend("bottomleft",lty=1,col='red',legend='Arima(1,0,0)(1,1,0)[4] Forecast')
legend("bottomleft",cex=0.5,col='red',legend='Arima(1,0,0)(1,1,0)[4] Forecast')
#Question 9
fcast = Arima(log(final_consumption_expenditure),
order = c(1,0,0), seasonal = c(1,1,0), include.drift = FALSE)
fc <- forecast(fcast, h = length(validation))
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- final_consumption_expenditure
plot(consumption_expenditure)
lines(fc$mean, col = 'red')
legend("bottomleft",cex=0.5,col='red',legend='Arima(1,0,0)(1,1,0)[4] Forecast')
plot(consumption_expenditure, ylim= c(1000, 5000))
plot(consumption_expenditure, ylim= c(1000, 4000))
plot(consumption_expenditure, ylim= c(2000, 4000))
lines(fc$mean, col = 'red')
legend("bottomleft",cex=0.5,col='red',legend='Arima(1,0,0)(1,1,0)[4] Forecast')
plot(consumption_expenditure, ylim= c(2000, 4000))
lines(fc$mean, col = 4)
legend("bottomleft",cex=0.5,col=4,legend='Arima(1,0,0)(1,1,0)[4] Forecast')
plot(consumption_expenditure, ylim= c(2000, 4000))
lines(fc$mean, col = 4)
legend("bottomleft",cex=0.5,col=c(4),legend='Arima(1,0,0)(1,1,0)[4] Forecast')
plot(consumption_expenditure, ylim= c(2000, 4000))
lines(fc$mean, col = 4)
legend("bottomleft",lty=1, cex=0.5,col=c(4),legend='Arima(1,0,0)(1,1,0)[4] Forecast')
plot(consumption_expenditure, ylim= c(2000, 4000))
lines(fc$mean, col = 'red')
legend("bottomleft",lty=1, cex=0.5,col='red',legend='Arima(1,0,0)(1,1,0)[4] Forecast')
plot(consumption_expenditure, ylim= c(1000, 4000))
lines(fc$mean, col = 'red')
legend("bottomleft",lty=1, cex=0.5,col='red',legend='Arima(1,0,0)(1,1,0)[4] Forecast')
plot(consumption_expenditure, ylim= c(1000, 4000))
lines(fc, col = 'red')
plot(consumption_expenditure, ylim= c(1000, 4000))
lines(fc$mean, col = 'red')
legend("bottomleft",lty=1, cex=0.5,col='red',legend='Arima(1,0,0)(1,1,0)[4] Forecast')
#Question 8
fit <- ets(log(final_air_ts), model="AAA" , restrict = TRUE)
fc <- forecast(fit, h = 34)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- final_air_ts
# Plot result on original scale
plot(fc, ylim = c(50000,3000000))
#Question 9
plot(air_ts, ylim = c(50000,3000000))
lines(fc$mean, col = 'red')
legend("bottomleft",lty=1, cex=0.5,col='red',legend='ETS(AAA) Forecast')
# Read the data
setwd("C:/Users/vrajagopalan/OneDrive - IESEG/Desktop/Forcasting") # Specify you own working directory here.
data <- read_excel("DataSets2022.xlsx", sheet="Airpass_BE")
head(data)
# Initialize Timeseries
air_ts <- ts(data[,2], frequency = 12, start = 2003)
#Initialize Train Test Validation Dataset
final_air_ts = window(air_ts, start = c(2003, 1),  end = c(2020,2))
# Train January 2003 up to December 2017
train = window(air_ts, start = c(2003, 1), end=c(2017,12))
train
# Test January 2018 up to February 2020
test = window(air_ts, start=c(2018,1), end = c(2020,2))
test
#Validation March 2020 - October 2021
validation = window(air_ts, start=c(2020,3), end = c(2021,10))
validation
#Question1
#Plot Timeseries
plot(air_ts)
tsdisplay(air_ts)
ggseasonplot(air_ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Air Passengers") +
ggtitle("Seasonal plot:  International intra-EU air passenger")
ggsubseriesplot(air_ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Air Passengers") +
ggtitle("Month plot:  International intra-EU air passenger")
#Question 2
final_air_ts
plot(final_air_ts)
tsdisplay(final_air_ts)
#Applying log tranformation
l_final_air_ts <- log(final_air_ts)
plot(l_final_air_ts)
tsdisplay(l_final_air_ts)
l_final_air_ts
plot(l_final_air_ts)
tsdisplay(diff(l_final_air_ts,12))
BoxCox.lambda(final_air_ts)
df <- data.frame()
# Question 3
h = length(test)
f1 <- snaive(train, h=h, lambda = 0)
checkresiduals(f1)
plot(f1)
checkresiduals(f1)
accuracy(f1,test)[,c(2,3,5,6)]
df <- rbind(df, cbind('snaive', accuracy(f1,test)[,c(2,3,5,6)]))
df
# Question 4
# Using stl
# Decompose the time series
dim(train) <- NULL
fit <- stl(log(train), s.window="periodic", t.window = 12)
fc <- forecast(fit, method="naive", h=h)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
# Plot result on original scale
plot(fc, ylim = c(50000,3000000))
checkresiduals(fcast)
accuracy(fcast,log(test))[,c(2,3,5,6)]
df <- rbind(df, cbind('stlnaive', accuracy(fcast,log(test))[,c(2,3,5,6)]))
df
fit <- stl(log(train), s.window="periodic", t.window = 12)
fcast <- forecast(fit, method="rwdrift", h=h)
plot(fcast)
checkresiduals(fcast)
accuracy(fcast,log(test))[,c(2,3,5,6)]
df <- rbind(df, cbind('stlrwdrift', accuracy(fcast,log(test))[,c(2,3,5,6)]))
fit <- stl(log(train), s.window="periodic", t.window = 12)
fcast <- forecast(fit, method="ets", h=h)
plot(fcast)
checkresiduals(fcast)
accuracy(fcast,log(test))[,c(2,3,5,6)]
df <- rbind(df, cbind('stlets', accuracy(fcast,log(test))[,c(2,3,5,6)]))
df
fit <- stl(log(train), s.window="periodic", t.window = 12)
fcast <- forecast(fit, method="arima", h=h)
plot(fcast)
checkresiduals(fcast)
accuracy(fcast,log(test))[,c(2,3,5,6)]
df <- rbind(df, cbind('stlarima', accuracy(fcast,log(test))[,c(2,3,5,6)]))
df
# Question 5
fit1 <- ets(log(train), model="AAA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
fit1 <- ets(log(train), model="ANA" , restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
fit1 <- ets(log(train), model="MAM", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1,lag = 26)
fit1 <- ets(log(train), model="MNM", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1,lag = 26)
fit1 <- ets(log(train), model="MAAd", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
fit1 <- ets(log(train), model="MAA", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
fit1 <- ets(log(train), model="MNA", restrict = TRUE)
accuracy(forecast(fit1,h),log(test))[,c(2,3,5,6)]
checkresiduals(fit1, lag = 26)
fit <- ets(log(train), restrict = TRUE)
summary(fit)
accuracy(forecast(fit,h),log(test))[,c(2,3,5,6)]
fc <- forecast(fit,h)
fc$lower <- exp(fc$lower)
fc$upper <- exp(fc$upper)
fc$mean <- exp(fc$mean)
fc$x <- train
# Plot result on original scale
plot(fc, ylim = c(50000,3000000))
checkresiduals(fit, lag = 26)
res <- residuals(fit)
tsdisplay(res)
# Question 6
#Checking for applicable diffs.
nsdiffs(l_final_air_ts)
d_l_final_air_ts = diff(l_final_air_ts,12)
ndiffs(d_l_final_air_ts)
nsdiffs(d_l_final_air_ts)
tsdisplay(d_l_final_air_ts)
tsdisplay(final_air_ts)
a <- auto.arima(log(train), allowdrift = FALSE,
approximation = FALSE, stepwise = FALSE,)
summary(a)
fa <- forecast(a, h=h)
accuracy(fa, log(test))[,c(2,3,5,6)]
checkresiduals(a)
tsdisplay(a$residuals)
a <- auto.arima(log(train), allowdrift = FALSE,
approximation = FALSE, stepwise = FALSE,d= 1, D=1)
summary(a)
fa <- forecast(a, h=h)
accuracy(fa, log(test))[,c(2,3,5,6)]
checkresiduals(a)
fcast = Arima(log(train),
order = c(1,0,1), seasonal = c(5,1,0), include.drift = FALSE)
fcast
fc <- forecast(fcast,h)
fc
